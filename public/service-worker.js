// service-worker.js

// Import the Workbox library from a CDN
importScripts('https://storage.googleapis.com/workbox-cdn/releases/6.1.5/workbox-sw.js');

if (workbox) {
  console.log(`Workbox is loaded!`);

  // Precache all of the assets generated by your build process.
  // These URLs are injected into the manifest by Workbox's build process.
  workbox.precaching.precacheAndRoute([
    { url: '/index.html', revision: '1' },
    { url: '/manifest.json', revision: '1' },
    { url: '/favicon.ico', revision: '1' },
    { url: '/android-chrome-192x192.png', revision: '1' },
    { url: '/android-chrome-512x512.png', revision: '1' },
    // Add other static assets that you want to precache
  ]);

  // Cache the Google Fonts stylesheets and webfont files,
  // for a year in a stale-while-revalidate strategy.
  workbox.routing.registerRoute(
    ({url}) => url.origin === 'https://fonts.googleapis.com' ||
               url.origin === 'https://fonts.gstatic.com',
    new workbox.strategies.StaleWhileRevalidate({
      cacheName: 'google-fonts',
      plugins: [
        new workbox.expiration.ExpirationPlugin({
          maxEntries: 50,
          maxAgeSeconds: 60 * 60 * 24 * 365,
        }),
      ],
    }),
  );

  // Use a "StaleWhileRevalidate" strategy for assets like CSS, JS, and images
  workbox.routing.registerRoute(
    ({request}) => request.destination === 'style' ||
                  request.destination === 'script' ||
                  request.destination === 'image',
    new workbox.strategies.StaleWhileRevalidate({
      cacheName: 'static-assets',
      plugins: [
        new workbox.expiration.ExpirationPlugin({
          maxEntries: 60,
          maxAgeSeconds: 60 * 60 * 24 * 30, // 30 days
        }),
      ],
    }),
  );

  // Fallback for offline pages
  workbox.routing.setCatchHandler(({event}) => {
    switch (event.request.destination) {
      case 'document':
        return caches.match('/index.html');
      default:
        return Response.error();
    }
  });


  // --- Advanced Feature: Background Sync for Contact Form ---

  // This will catch failed POST requests for your contact form.
  // You will need to change '/api/contact/' to your actual Django endpoint.
  const backgroundSyncQueue = new workbox.backgroundSync.BackgroundSyncPlugin('contactFormQueue', {
      maxRetentionTime: 24 * 60, // Retry for a day
  });

  workbox.routing.registerRoute(
    new RegExp('/api/contact/'), // Replace with your Django contact form endpoint
    new workbox.strategies.NetworkOnly({
      plugins: [backgroundSyncQueue],
    }),
    'POST'
  );
  // --- End of Background Sync Feature ---

} else {
  console.log(`Workbox failed to load.`);
}